scalar DateTime

extend type Query {
  order(input: OrderInput!): Order
  orderSet(input: OrderSetInput!): OrderSet

  bitmexCurrencies: [BitmexCurrency!]!
  binanceCurrencies: [BinanceCurrency!]!
  currency(input: CurrencyInput!): CurrencyResponse

  position(input: PositionInput!): Position

  asyncOperationStatus(input: AsyncOperationStatusInput!): AsyncOperationStatus

  exchangeAccount(input: ExchangeAccountInput!): ExchangeAccount
  exchangeAccounts(input: ExchangeAccountsInput!): [ExchangeAccount!]!
}

extend type Mutation {
  createOrderSet(input: CreateOrderSetInput!): CreateOrderSetResult
  updateOrderSet(input: UpdateOrderSetInput!): UpdateOrderSetResult
  cancelOrderSet(input: CancelOrderSetInput!): CancelOrderSetResult

  cancelOrder(input: CancelOrderInput!): CancelOrderResponse
  closePositions(input: ClosePositionsInput!): ClosePositionsResult
  addStopToPositions(input: AddStopToPositionsInput!): [AddStopToPositionsResult!]
  addTslToPositions(input: AddTslToPositionsInput!): [AddTslToPositionsResult!]

  createExchangeAccount(input: CreateExchangeAccountInput!): CreateExchangeAccountResult
  deleteExchangeAccount(input: DeleteExchangeAccountInput!): DeleteExchangeAccountResult!
  updateExchangeAccount(input: UpdateExchangeAccountInput!): UpdateExchangeAccountResult!
  toggleExchangeAccountActive(input: ToggleExchangeAccountActiveInput!): ToggleExchangeAccountActiveResult!
}

###################
# Order
###################
type Order @key(fields: "id") {
  id: ID!
  orderSet: OrderSet!
  side: OrderSide!
  exchange: Exchange!
  orderType: OrderType!
  status: OrderStatus!
  closeOrder: Boolean!
  leverage: Float!
  price: Float
  quantity: Float
  stopPrice: Float
  trailingStopPercent: Float
  stopTriggerType: StopTriggerType
  filledQty: Float
  symbol: String!
  lastTimestamp: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  exchangeAccount: ExchangeAccount!
}

input OrderInput {
  id: ID!
}

input CancelOrderInput {
  id: ID!
}

type CancelOrderResponse {
  operationId: ID
  error: String
}

###################
# OrderSet
###################
type OrderSet @key(fields: "id") {
  id: ID!
  exchange: Exchange!
  symbol: String!
  price: Float
  side: OrderSide!
  orderType: OrderType!
  closeOrderSet: Boolean!
  orders(limit: Int, offset: Int, stopOrderType: StopOrderType): OrderSetOrders!
  percent: Float!
  leverage: Float!
  stopPrice: Float
  trailingStopPercent: Float
  stopTriggerType: StopTriggerType
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OrderSetOrders {
  totalCount: Int!
  orders: [Order!]!
}

input OrderSetInput {
  id: ID!
  stopOrderType: StopOrderType
}

input CreateOrderSetInput {
  groupId: ID!
  exchangeAccountIds: [ID!]!
  symbol: String!
  exchange: Exchange!
  description: String
  side: OrderSide!
  orderType: OrderType!
  closeOrderSet: Boolean!
  leverage: Float!
  price: Float
  percent: Float
  stopPrice: Float
  trailingStopPercent: Float
  stopTriggerType: StopTriggerType
}

input UpdateOrderSetInput {
  orderSetId: ID!
  description: String!
  leverage: Float!
  price: Float
  stopPrice: Float
  trailingStopPercent: Float
  stopTriggerType: StopTriggerType
}

input CancelOrderSetInput {
  orderSetId: ID!
  stopOrderTypes: [StopOrderType!]
}

type CreateOrderSetResult {
  orderSet: OrderSet
}

type UpdateOrderSetResult {
  operationId: ID
  error: String
}

type CancelOrderSetResult {
  success: Boolean!
  error: String
}

###################
# Position
###################
type Position @key(fields: "id") {
  id: ID!
  exchangeAccount: ExchangeAccount!
  side: PositionSide!
  exchange: Exchange!
  quantity: Float
  avgPrice: Float
  symbol: String!
  isOpen: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PositionInput {
  id: ID!
}

input ClosePositionsInput {
  symbol: String!
  price: Float
  percent: Float
  exchangeAccountIds: [ID!]!
}

type ClosePositionsResult {
  orderSet: OrderSet
}

input AddStopToPositionsInput {
  symbol: String!
  stopPrice: Float!
  exchangeAccountIds: [ID!]!
  stopTriggerPriceType: StopTriggerType!
}

type AddStopToPositionsResult {
  operationId: ID
  error: String
}

input AddTslToPositionsInput {
  symbol: String!
  tslPercent: Float!
  exchangeAccountIds: [ID!]!
  stopTriggerPriceType: StopTriggerType!
}

type AddTslToPositionsResult {
  operationId: ID
  error: String
}


###########################
# ExchangeAccount
###########################

type ExchangeAccount @key(fields: "id") {
  id: ID!
  active: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  exchange: Exchange!
  apiKey: String!
  apiSecret: String!
  orders: [Order!]!
  positions(input: ExchangeAccountPositionsInput): ExchangeAccountPositionsResult
  position(input: ExchangeAccountSymbolPositionInput!): ExchangeAccountSymbolPositionResult
  membershipId: ID!
}

input ExchangeAccountInput {
  id: ID!
}

input ExchangeAccountsInput {
  membershipId: ID!
}

input CreateExchangeAccountInput {
  exchange: Exchange!
  membershipId: ID!
  apiKey: String!
  apiSecret: String!
}

type CreateExchangeAccountResult {
  operationId: ID
  error: String
}

input DeleteExchangeAccountInput {
  id: ID!
}

type DeleteExchangeAccountResult {
  operationId: ID
  error: String
}

input ToggleExchangeAccountActiveInput {
  id: ID!
}

type ToggleExchangeAccountActiveResult {
  operationId: ID
  error: String
}

input UpdateExchangeAccountInput {
  id: ID!
  apiKey: String!
  apiSecret: String!
}

type UpdateExchangeAccountResult {
  operationId: ID
  error: String
}

input ExchangeAccountPositionsInput {
  limit: Int
  offset: Int
}

type ExchangeAccountPositionsResult {
  positions: [Position!]!
  totalCount: Int!
}

input ExchangeAccountSymbolPositionInput {
  symbol: String!
}

type ExchangeAccountSymbolPositionResult {
  position: Position!
}

###########################
# AsyncOperation
###########################
type AsyncOperation {
  id: ID!
  opType: OperationType!
  success: Boolean!
  complete: Boolean!
  error: String
}

input AsyncOperationStatusInput {
  id: ID!
}

type AsyncOperationStatus {
  operation: AsyncOperation!
}

###########################
# Currency
###########################
union Currency = BitmexCurrency | BinanceCurrency

input CurrencyInput {
  exchange: Exchange!
  symbol: String!
}

type CurrencyResponse {
  currency: Currency
}


###########################
# BitmexCurrency
###########################

type BitmexCurrency @key(fields: "id") {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  symbol: String!
  underlying: String!
  active: Boolean!
  fractionalDigits: Int
  lastPrice: Float
  markPrice: Float
  maxPrice: Float
  tickSize: Float
}

###########################
# BinanceCurrency
###########################

type BinanceCurrency @key(fields: "id") {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  symbol: String!
  status: BinanceSymbolStatus!
  lastPrice: Float
  openPrice: Float
  highPrice: Float
  lowPrice: Float
  priceChange: Float
  priceChangePercent: Float
  minPrice: String!
  maxPrice: String!
  tickSize: String!
  baseAsset: String!
  quoteAsset: String!
  baseAssetPrecision: Int!
  quotePrecision: Int!
  quoteAssetPrecision: Int!
  baseCommissionPrecision: Int!
  quoteCommissionPrecision: Int!
  allowsLimit: Boolean!
  allowsMarket: Boolean!
  allowsStopLoss: Boolean!
  allowsStopLossLimit: Boolean!
  allowsTakeProfit: Boolean!
  allowsTakeProfitLimit: Boolean!
}

###########################
# Group extension
###########################
extend type Group @key(fields: "id") {
  id: ID! @external
  orderSets(limit: Int, offset: Int): GroupOrderSets!
  orderSet(input: OrderSetInput!): OrderSet

  symbolsWithPosition: SymbolsWithPositionResult
}

type GroupOrderSets {
  orderSets: [OrderSet!]!
  totalCount: Int!
}

type SymbolsWithPositionResult {
  binance: [BinanceCurrency!]!
  bitmex: [BitmexCurrency!]! 
}

###########################
# GroupMembership extension
###########################
extend type GroupMembership @key(fields: "id") {
  id: ID! @external
  orders(input: MemberOrdersInput!): MemberOrdersResult!
  positions(input: MemberPositionsInput!): MemberPositionsResult!
  exchangeAccounts: [ExchangeAccount!]!
}

type MemberOrdersResult {
  orders: [Order!]!
  totalCount: Int!
}

type MemberPositionsResult {
  positions: [Position!]!
  totalCount: Int!
}

input MemberPositionsInput {
  exchange: Exchange
  symbol: String
  limit: Int
  offset: Int
}

input MemberOrdersInput {
  limit: Int
  offset: Int
}

###########################
# Enums
###########################
enum OrderSide {
  BUY
  SELL
}

enum OrderType {
  MARKET
  LIMIT
}

enum StopOrderType {
  NONE
  STOP_LIMIT
  TRAILING_STOP
}

enum StopTriggerType {
  LAST_PRICE
  MARK_PRICE
}

enum Exchange {
  BINANCE
  BITMEX
}

enum OrderStatus {
  NEW
  FILLED
  PARTIALLY_FILLED
  CANCELED
  REJECTED
}

enum PositionSide {
  LONG
  SHORT
}

enum BinanceSymbolStatus {
  AUCTION_MATCH
  BREAK
  END_OF_DAY
  HALT
  POST_TRADING
  PRE_TRADING
  TRADING
}

enum OperationType {
  # Binance
  CANCEL_BINANCE_ORDER
  CREATE_BINANCE_ORDER
  UPDATE_BINANCE_ORDER
  CREATE_BINANCE_ACCOUNT
  DELETE_BINANCE_ACCOUNT
  DISABLE_BINANCE_ACCOUNT
  UPDATE_BINANCE_ACCOUNT

  # Bitmex
  CANCEL_BITMEX_ORDER
  CREATE_BITMEX_ORDER
  UPDATE_BITMEX_ORDER
  CREATE_BITMEX_ACCOUNT
  DELETE_BITMEX_ACCOUNT
  DISABLE_BITMEX_ACCOUNT
  UPDATE_BITMEX_ACCOUNT
}
