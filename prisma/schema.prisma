generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BinanceCurrency {
  id                         Int                 @id @default(autoincrement())
  symbol                     String              @unique
  status                     BinanceSymbolStatus
  baseAsset                  String
  baseAssetPrecision         Int?
  quoteAsset                 String
  quotePrecision             Int?
  quoteAssetPrecision        Int?
  baseCommissionPrecision    Int?
  quoteCommissionPrecision   Int?
  allowsLimit                Boolean?            @default(false)
  allowsMarket               Boolean?            @default(false)
  allowsStopLoss             Boolean?            @default(false)
  allowsStopLossLimit        Boolean?            @default(false)
  allowsTakeProfit           Boolean?            @default(false)
  allowsTakeProfitLimit      Boolean?            @default(false)
  allowsLimitMaker           Boolean?            @default(false)
  icebergAllowed             Boolean?            @default(false)
  ocoAllowed                 Boolean?            @default(false)
  quoteOrderQtyMarketAllowed Boolean?            @default(false)
  isSpotTradingAllowed       Boolean?            @default(false)
  isMarginTradingAllowed     Boolean?            @default(false)
  spotPermission             Boolean?            @default(false)
  leveragedPermission        Boolean?            @default(false)
  marginPermission           Boolean?            @default(false)
  lastPrice                  String?
  openPrice                  String?
  highPrice                  String?
  lowPrice                   String?
  priceChange                String?
  priceChangePercent         String?
  minPrice                   String?
  maxPrice                   String?
  tickSize                   String?
  multiplierUp               String?
  multiplierDown             String?
  percentAvgPriceMins        Float?
  minQty                     String?
  maxQty                     String?
  stepSize                   String?
  minNotional                String?
  applyToMarket              Boolean?            @default(false)
  minNotionalAvgPriceMins    Float?
  icebergLimit               Float?
  marketMinQty               String?
  marketMaxQty               String?
  marketStepSize             String?
  maxNumOrders               Int?
  maxNumAlgoOrders           Int?
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @default(now())
}

model BitmexCurrency {
  id               Int      @id @default(autoincrement())
  symbol           String   @unique
  underlying       String   @unique
  active           Boolean? @default(false)
  fractionalDigits Int?
  lastPrice        Float?
  markPrice        Float?
  tickSize         Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
}

model OrderSet {
  id          Int       @id @default(autoincrement())
  exchange    Exchange
  symbol      String
  description String?
  groupId     Int
  orderType   OrderType
  price       Float?
  stopPrice   Float?
  percent     Float
  side        OrderSide
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  orders      Order[]
}

model ExchangeAccount {
  id              Int        @id @default(autoincrement())
  active          Boolean    @default(false)
  exchange        Exchange
  membershipId    Int
  remoteAccountId String?
  apiKey          String
  apiSecret       String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now())
  orders          Order[]
  positions       Position[]

  @@unique([exchange, membershipId], name: "ExchangeAccount_exchange_membershipId_key")
}

model AsyncOperation {
  id        Int           @id @default(autoincrement())
  opType    OperationType
  complete  Boolean       @default(false)
  success   Boolean?      @default(false)
  error     String?
  payload   Json?
  userId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

model Order {
  id                Int             @id @default(autoincrement())
  orderSetId        Int
  exchangeAccountId Int
  symbol            String
  exchange          Exchange
  side              OrderSide
  lastTimestamp     DateTime?
  orderType         OrderType?
  price             Float?
  stopPrice         Float?
  quantity          Float?
  filledQty         Float?
  status            OrderStatus
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  exchangeAccount   ExchangeAccount @relation(fields: [exchangeAccountId], references: [id])
  orderSet          OrderSet        @relation(fields: [orderSetId], references: [id])
}

model Position {
  id                Int             @id @default(autoincrement())
  exchangeAccountId Int
  symbol            String
  exchange          Exchange
  side              PositionSide
  avgPrice          Float?
  quantity          Float?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())
  exchangeAccount   ExchangeAccount @relation(fields: [exchangeAccountId], references: [id])
}

enum BinanceSymbolStatus {
  AUCTION_MATCH
  BREAK
  END_OF_DAY
  HALT
  POST_TRADING
  PRE_TRADING
  TRADING
}

enum Exchange {
  BINANCE
  BITMEX
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  CANCELED
  FILLED
  NEW
  PARTIALLY_FILLED
}

enum OrderType {
  LIMIT
  MARKET
}

enum PositionSide {
  LONG
  SHORT
}

enum OperationType {
  CANCEL_BINANCE_ORDER
  CREATE_BINANCE_ACCOUNT
  CREATE_BINANCE_ORDER
  DELETE_BINANCE_ACCOUNT
  DISABLE_BINANCE_ACCOUNT
  UPDATE_BINANCE_ACCOUNT
  UPDATE_BINANCE_ORDER
}
